<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LMC_Blog</title>
  
  
  <link href="http://lmc.pub/atom.xml" rel="self"/>
  
  <link href="http://lmc.pub/"/>
  <updated>2023-03-27T01:35:55.638Z</updated>
  <id>http://lmc.pub/</id>
  
  <author>
    <name>LMC</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>好用JSON美化插件</title>
    <link href="http://lmc.pub/2023/03/27/%E5%A5%BD%E7%94%A8JSON%E7%BE%8E%E5%8C%96%E6%8F%92%E4%BB%B6/"/>
    <id>http://lmc.pub/2023/03/27/%E5%A5%BD%E7%94%A8JSON%E7%BE%8E%E5%8C%96%E6%8F%92%E4%BB%B6/</id>
    <published>2023-03-27T01:31:13.000Z</published>
    <updated>2023-03-27T01:35:55.638Z</updated>
    
    <content type="html"><![CDATA[<h3 id="直接在网页看">直接在网页看</h3><p>FeHelper（插件）</p><p><a href="https://microsoftedge.microsoft.com/addons/detail/fehelper%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8B/feolnkbgcbjmamimpfcnklggdcbgakhe?hl=zh-CN">https://microsoftedge.microsoft.com/addons/detail/fehelper前端助手/feolnkbgcbjmamimpfcnklggdcbgakhe?hl=zh-CN</a></p><h3 id="解析Json网页">解析Json网页</h3><p>好用的 JSON 格式化视图工具：</p><p><a href="https://www.bejson.com/jsonviewernew/">https://www.bejson.com/jsonviewernew/</a></p>]]></content>
    
    
    <summary type="html">Json直接看很费力，这是一些帮助格式化 Gson 的工具。</summary>
    
    
    
    <category term="其他" scheme="http://lmc.pub/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="Json" scheme="http://lmc.pub/categories/%E5%85%B6%E4%BB%96/Json/"/>
    
    
    <category term="Json" scheme="http://lmc.pub/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>【Android】Android调试最佳搭档</title>
    <link href="http://lmc.pub/2023/03/27/%E3%80%90Android%E3%80%91Android%E8%B0%83%E8%AF%95%E6%9C%80%E4%BD%B3%E6%90%AD%E6%A1%A3/"/>
    <id>http://lmc.pub/2023/03/27/%E3%80%90Android%E3%80%91Android%E8%B0%83%E8%AF%95%E6%9C%80%E4%BD%B3%E6%90%AD%E6%A1%A3/</id>
    <published>2023-03-27T01:30:06.000Z</published>
    <updated>2023-03-27T01:35:12.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="真机调试">真机调试</h2><p>Anlink</p><h2 id="虚拟机调试">虚拟机调试</h2><p>夜神模拟器</p>]]></content>
    
    
    <summary type="html">小众宝藏搭配，AS调试双雄。</summary>
    
    
    
    <category term="Android" scheme="http://lmc.pub/categories/Android/"/>
    
    
    <category term="Android工具" scheme="http://lmc.pub/tags/Android%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>【Bug】小米手机USB安装提示弹窗关闭</title>
    <link href="http://lmc.pub/2023/03/27/%E3%80%90Bug%E3%80%91%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BAUSB%E5%AE%89%E8%A3%85%E6%8F%90%E7%A4%BA%E5%BC%B9%E7%AA%97%E5%85%B3%E9%97%AD/"/>
    <id>http://lmc.pub/2023/03/27/%E3%80%90Bug%E3%80%91%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BAUSB%E5%AE%89%E8%A3%85%E6%8F%90%E7%A4%BA%E5%BC%B9%E7%AA%97%E5%85%B3%E9%97%AD/</id>
    <published>2023-03-27T01:26:30.000Z</published>
    <updated>2023-03-27T01:29:13.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="怎么关闭小米手机这个，USB安装提示弹窗？">怎么关闭小米手机这个，USB安装提示弹窗？</h2><blockquote><ol><li>打开手机开发者选项；</li><li>进入开发者，关闭 <code>MIUI优化</code>；</li><li>找到<strong>应用管理</strong> -》<strong>权限管理</strong> -》<strong>右上角三个点</strong>；</li><li>进去把 USB 那个关了；</li><li>退出来，打开<code>MUIU优化</code></li></ol></blockquote>]]></content>
    
    
    <summary type="html">AS真机调试的时候总是弹出【USB安装提示窗口】，这是关闭方法</summary>
    
    
    
    <category term="Bug" scheme="http://lmc.pub/categories/Bug/"/>
    
    
    <category term="Bug" scheme="http://lmc.pub/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>【Bug】AS_push_GitHub失败</title>
    <link href="http://lmc.pub/2023/03/27/%E3%80%90Bug%E3%80%91AS-push-GitHub%E5%A4%B1%E8%B4%A5/"/>
    <id>http://lmc.pub/2023/03/27/%E3%80%90Bug%E3%80%91AS-push-GitHub%E5%A4%B1%E8%B4%A5/</id>
    <published>2023-03-27T01:22:13.000Z</published>
    <updated>2023-03-27T01:25:04.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bug描述">Bug描述</h2><blockquote><p>AS push 代码到 GitHub报错：</p><p>调用失败 服务器中的文件意外结束</p></blockquote><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230327092253844.png" alt="image-20230327092253844"></p><h2 id="solution">solution</h2><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230327090719759.png" alt="image-20230327090719759"></p>]]></content>
    
    
    <summary type="html">Unexpected end of file from server</summary>
    
    
    
    <category term="Bug" scheme="http://lmc.pub/categories/Bug/"/>
    
    
    <category term="Bug" scheme="http://lmc.pub/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>【算法】两两交换链表中的节点24</title>
    <link href="http://lmc.pub/2023/03/27/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B924/"/>
    <id>http://lmc.pub/2023/03/27/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B924/</id>
    <published>2023-03-26T23:34:14.000Z</published>
    <updated>2023-03-27T00:11:58.819Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">24. 两两交换链表中的节点 - 力扣（Leetcode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两两交换链表中的节点24</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwapNodesInPairs24</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> initLinkedList(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;);</span><br><span class="line">printLinkedList(head);</span><br><span class="line"></span><br><span class="line">head = <span class="keyword">new</span> <span class="title class_">solution</span>().swapPairs02(head);</span><br><span class="line">printLinkedList(head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">initLinkedList</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(nums[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head,node;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">    node = <span class="keyword">new</span> <span class="title class_">ListNode</span>(nums[i]);</span><br><span class="line">    cur.next = node;</span><br><span class="line">    cur = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printLinkedList</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.print(cur.val + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">    cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span> &#123;</span><br><span class="line"><span class="comment">//迭代法</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果 head 为空或者只有一个节点</span></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> swapPairs(next.next);</span><br><span class="line"></span><br><span class="line">next.next = cur;</span><br><span class="line">cur.next = temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//虚拟头节点法</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">swapPairs02</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果 head 为空或者只有一个节点</span></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>,head);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy;</span><br><span class="line">ListNode first;</span><br><span class="line">ListNode second;</span><br><span class="line">ListNode temp;</span><br><span class="line"><span class="keyword">while</span> (cur.next != <span class="literal">null</span> &amp;&amp; cur.next.next != <span class="literal">null</span>)&#123;</span><br><span class="line">first = cur.next;</span><br><span class="line">second = cur.next.next;</span><br><span class="line">temp = cur.next.next.next;</span><br><span class="line"><span class="comment">//开始交换</span></span><br><span class="line">cur.next = second;</span><br><span class="line">second.next = first;</span><br><span class="line">first.next = temp;</span><br><span class="line">cur = first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">ListNode next;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span> <span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span> <span class="params">(<span class="type">int</span> val)</span>&#123; </span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span> <span class="params">(<span class="type">int</span> val, ListNode next)</span>&#123; </span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">用了【迭代法】和【虚拟头节点法】两种实现方式</summary>
    
    
    
    <category term="算法" scheme="http://lmc.pub/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://lmc.pub/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【Bug】IDEA控制台中文乱码</title>
    <link href="http://lmc.pub/2023/03/27/%E3%80%90Bug%E3%80%91IDEA%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <id>http://lmc.pub/2023/03/27/%E3%80%90Bug%E3%80%91IDEA%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</id>
    <published>2023-03-26T22:43:46.000Z</published>
    <updated>2023-03-27T00:18:38.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述：">问题描述：</h2><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230327064547056.png" alt="image-20230327064547056"></p><h2 id="病根子：">病根子：</h2><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230327064520267.png" alt="image-20230327064520267"></p><h2 id="solution：">solution：</h2><h3 id="1">1</h3><p>来到IDEA 的安装目录的bin下面，找<code>**idea64.exe.vmoptions**</code>文件打开。</p><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230327064749861.png" alt="image-20230327064749861"></p><p>最后一行加上：<code>-Dfile.encoding=UTF-8</code> 保存退出</p><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230327064831092.png" alt="image-20230327064831092"></p><h3 id="2">2</h3><p>IDEA<code>设置-》编辑器-》file Encodings</code> 然后如图。</p><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230327065042510.png" alt="image-20230327065042510"></p><h3 id="3">3</h3><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230327065214120.png" alt="image-20230327065214120"></p><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230327065242330.png" alt="image-20230327065242330"></p><h2 id="解决">解决</h2><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230327065726083.png" alt="image-20230327065726083"></p>]]></content>
    
    
    <summary type="html">IDEA控制台中文显示乱码。GBK与UTF-8.</summary>
    
    
    
    <category term="Bug" scheme="http://lmc.pub/categories/Bug/"/>
    
    
    <category term="Bug" scheme="http://lmc.pub/tags/Bug/"/>
    
  </entry>
  
  <entry>
    <title>【算法】翻转链表206</title>
    <link href="http://lmc.pub/2023/03/26/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8206/"/>
    <id>http://lmc.pub/2023/03/26/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8206/</id>
    <published>2023-03-26T10:38:56.000Z</published>
    <updated>2023-03-27T00:18:07.994Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表 - 力扣（Leetcode）</a></p></blockquote><h2 id="双指针法">双指针法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReverseLinkedList206</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> initLinkedList(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;);</span><br><span class="line">printLinkedList(head);</span><br><span class="line">printLinkedList(reverseList(head));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双指针法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">ListNode nextNode;</span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">nextNode = cur.next;</span><br><span class="line">cur.next = pre;</span><br><span class="line">pre = cur;</span><br><span class="line">cur = nextNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">initLinkedList</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(nums[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head,node;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">    node = <span class="keyword">new</span> <span class="title class_">ListNode</span>(nums[i]);</span><br><span class="line">    cur.next = node;</span><br><span class="line">    cur = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printLinkedList</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.print(cur.val + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">    cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">ListNode next;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span>&#123;<span class="built_in">this</span>.val = val;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代法">迭代法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReverseLinkedList206</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> initLinkedList(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;);</span><br><span class="line">printLinkedList(head);</span><br><span class="line">printLinkedList(reverseList(head));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> reverse(<span class="literal">null</span>,head);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode pre, ListNode cur)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">    cur.next = pre;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reverse(cur,temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">initLinkedList</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(nums[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head,node;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">    node = <span class="keyword">new</span> <span class="title class_">ListNode</span>(nums[i]);</span><br><span class="line">    cur.next = node;</span><br><span class="line">    cur = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printLinkedList</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.print(cur.val + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">    cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">ListNode next;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span>&#123;<span class="built_in">this</span>.val = val;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逆向迭代法">逆向迭代法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReverseLinkedList206</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> initLinkedList(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;);</span><br><span class="line">printLinkedList(head);</span><br><span class="line">printLinkedList(reverseList(head));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代法（从后向前递归）挺有意思哈</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"><span class="comment">//边界条件判断</span></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ListNode</span> <span class="variable">ret</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line"><span class="comment">//region 捎带干的事情</span></span><br><span class="line">head.next.next = head;</span><br><span class="line">head.next = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//region 捎带干的事情</span></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">initLinkedList</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(nums[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head,node;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">    node = <span class="keyword">new</span> <span class="title class_">ListNode</span>(nums[i]);</span><br><span class="line">    cur.next = node;</span><br><span class="line">    cur = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printLinkedList</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.print(cur.val + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">    cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">ListNode next;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span>&#123;<span class="built_in">this</span>.val = val;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个逆向迭代虽然不好理解。</p><p>但是真的很妙。</p></blockquote><h2 id="头插法">头插法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//虚拟头节点法（头插法）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">dummyNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line">cur.next = dummyNode.next;</span><br><span class="line">dummyNode.next = cur;</span><br><span class="line"></span><br><span class="line">cur = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dummyNode.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="栈法">栈法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//栈法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//当只有一个节点或者没有节点的时候直接返回 head 就可以了</span></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">stack.push(cur);</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">cur = dummy;</span><br><span class="line"><span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">cur.next = stack.pop();</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line">cur.next = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span> dummy.next;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>体会思想就可以了</p>]]></content>
    
    
    <summary type="html">面试常考算法。实现方式多样：双指针法，迭代法，逆向迭代法，头插法，栈法。</summary>
    
    
    
    <category term="算法" scheme="http://lmc.pub/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://lmc.pub/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【Android】网络框架（OKHttp&amp;Retrofit）</title>
    <link href="http://lmc.pub/2023/03/26/%E3%80%90Android%E3%80%91%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/"/>
    <id>http://lmc.pub/2023/03/26/%E3%80%90Android%E3%80%91%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6/</id>
    <published>2023-03-26T08:41:56.000Z</published>
    <updated>2023-03-27T00:12:43.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-网络框架">Android 网络框架</h2><blockquote><p>Android 中在【网络】部分常用的框架组合是：</p><p>OkHttp + Retrofit</p></blockquote><h3 id="一，准备-v2">一，准备</h3><h4 id="添加权限">添加权限</h4><p><img src="C:/Users/Micenlee/AppData/Roaming/Typora/typora-user-images/image-20230326164537884.png" alt="image-20230326164537884"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加依赖">添加依赖</h4><p><img src="C:/Users/Micenlee/AppData/Roaming/Typora/typora-user-images/image-20230326164757266.png" alt="image-20230326164757266"></p><p><img src="C:/Users/Micenlee/AppData/Roaming/Typora/typora-user-images/image-20230326164731781.png" alt="image-20230326164731781"></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//region 请求网络相关</span></span><br><span class="line"><span class="comment">//提示：region这种语法是最新的，推荐使用这种，也更容易阅读，不建议在同一个文件同时使用</span></span><br><span class="line"><span class="comment">//因为可能会显示出错</span></span><br><span class="line"><span class="comment">//okhttp</span></span><br><span class="line"><span class="comment">//https://github.com/square/okhttp</span></span><br><span class="line">implementation <span class="string">&#x27;com.squareup.okhttp3:okhttp:4.9.3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用来打印okhttp请求日志</span></span><br><span class="line"><span class="comment">//当然也可以自定义</span></span><br><span class="line">implementation(<span class="string">&quot;com.squareup.okhttp3:logging-interceptor:4.9.3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//retrofit</span></span><br><span class="line"><span class="comment">//https://github.com/square/retrofit</span></span><br><span class="line">implementation <span class="string">&#x27;com.squareup.retrofit2:retrofit:2.9.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用gson解析json</span></span><br><span class="line"><span class="comment">//https://github.com/google/gson</span></span><br><span class="line">implementation <span class="string">&#x27;com.google.code.gson:gson:2.9.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//适配retrofit使用gson解析</span></span><br><span class="line"><span class="comment">//版本要和retrofit一样</span></span><br><span class="line">implementation <span class="string">&#x27;com.squareup.retrofit2:converter-gson:2.9.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//适配retrofit支持rxjava</span></span><br><span class="line">implementation <span class="string">&#x27;com.squareup.retrofit2:adapter-rxjava3:2.9.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用了Android响应式编程</span></span><br><span class="line"><span class="comment">//RxJava和RxAndroid区别？</span></span><br><span class="line"><span class="comment">//简单来说：就是RxAndroid在RxJava的基础上</span></span><br><span class="line"><span class="comment">//优化了一些功能</span></span><br><span class="line"><span class="comment">//增强了Android特有的功能</span></span><br><span class="line"><span class="comment">//https://github.com/ReactiveX/RxAndroid</span></span><br><span class="line">implementation <span class="string">&#x27;io.reactivex.rxjava3:rxandroid:3.0.0&#x27;</span></span><br><span class="line"><span class="comment">//endregion</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面直接所有网络相关的依赖都加进去了。</p><h4 id="配置网络地址">配置网络地址</h4><p>好处：</p><p>可以这样。</p><p><img src="C:/Users/Micenlee/AppData/Roaming/Typora/typora-user-images/image-20230326173306893.png" alt="image-20230326173306893"></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面被注释掉的文件是已经配置到 common.gradle 文件，所以这里就可以不写了</span></span><br><span class="line"><span class="comment">     * 如果不一样，这里可以再写要用的配置，来覆盖公共配置文件内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//不加下面这个 sync 之后，那个java Config包出不来。    </span></span><br><span class="line">        <span class="comment">//渠道相关</span></span><br><span class="line">        flavorDimensions <span class="string">&quot;versionCode&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">   ……</span><br><span class="line">    <span class="comment">//配置不同的环境</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        <span class="comment">//本地开发环境</span></span><br><span class="line">        local &#123;</span><br><span class="line">            <span class="comment">//API端点</span></span><br><span class="line">            buildConfigField(<span class="string">&#x27;String&#x27;</span>, <span class="string">&quot;ENDPOINT&quot;</span>, <span class="string">&#x27;&quot;http://192.168.50.139:8080/&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//资源端点</span></span><br><span class="line">            buildConfigField <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;RESOURCE_ENDPOINT&#x27;</span>, <span class="string">&#x27;&quot;http://course-music-dev.ixuea.com/%s&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">            dimension = minSdkVersion</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开发环境（我们都在用这个）</span></span><br><span class="line">        dev &#123;</span><br><span class="line">            <span class="comment">//API端点</span></span><br><span class="line">            buildConfigField(<span class="string">&#x27;String&#x27;</span>, <span class="string">&quot;ENDPOINT&quot;</span>, <span class="string">&#x27;&quot;http://my-cloud-music-api-sp3-dev.ixuea.com/&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//资源端点</span></span><br><span class="line">            buildConfigField <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;RESOURCE_ENDPOINT&#x27;</span>, <span class="string">&#x27;&quot;http://course-music-dev.ixuea.com/%s&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">            dimension = minSdkVersion</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正式环境</span></span><br><span class="line">        prod &#123;</span><br><span class="line">            <span class="comment">//API端点</span></span><br><span class="line">            buildConfigField <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;ENDPOINT&#x27;</span>, <span class="string">&#x27;&quot;http://my-cloud-music-api-sp3.ixuea.com/&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//资源端点</span></span><br><span class="line">            buildConfigField <span class="string">&#x27;String&#x27;</span>, <span class="string">&#x27;RESOURCE_ENDPOINT&#x27;</span>, <span class="string">&#x27;&quot;http://course-music.ixuea.com/%s&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">            dimension = minSdkVersion</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:/Users/Micenlee/AppData/Roaming/Typora/typora-user-images/image-20230326165901353.png" alt="image-20230326165901353"></p><p>在添加了依赖之后，点击 sync 同步。然后 run 一下。</p><p>我们的资源网址就在<code>BuildConfig</code>这个Java类里面了。</p><p>我们这里直接放在一个系统的 Config 文件中方便管理。</p><h4 id="让APP可以发送-HTTP-请求">让APP可以发送 HTTP 请求</h4><blockquote><p>一般来说，APP现在不允许发送 Http 请求。</p><p>但是 OKHttp 就是 Http 请求。</p><p>所以为了测试成功还要再加这模一句。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.ixuea.courses.mymusic&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:usesCleartextTraffic</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">....</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:/Users/Micenlee/AppData/Roaming/Typora/typora-user-images/image-20230326172104068.png" alt="image-20230326172104068"></p><h3 id="二，OkHttp">二，OkHttp</h3><p>用OKHttp 请求网络。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * okhttp get请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">testGet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//构建 OKHttp 客户端 client 实例</span></span><br><span class="line">        <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拼接好 绝对地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> Config.ENDPOINT + <span class="string">&quot;v1/sheets&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//建立OKHttp请求</span></span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                .url(url)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用上面创建的客户端实例去发送请求，同时观察结果。</span></span><br><span class="line">        <span class="comment">//同时做回调处理</span></span><br><span class="line">        client.newCall(request).enqueue(<span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">            <span class="comment">//失败 -&gt; 执行下面这个方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onFailure</span><span class="params">(<span class="meta">@NonNull</span> Call call, <span class="meta">@NonNull</span> IOException e)</span> &#123;</span><br><span class="line">                <span class="comment">//失败就打印失败日志</span></span><br><span class="line">                Log.e(TAG, <span class="string">&quot;onFailure: &quot;</span> + e.getLocalizedMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//成功 -&gt; 就执行这个方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onResponse</span><span class="params">(<span class="meta">@NonNull</span> Call call, <span class="meta">@NonNull</span> Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="comment">//成功就打印返回的数据流 String 类型</span></span><br><span class="line">                Log.d(TAG, <span class="string">&quot;onResponse: &quot;</span> + response.body().string());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试成功的样子。</p><p><img src="C:/Users/Micenlee/AppData/Roaming/Typora/typora-user-images/image-20230326172406897.png" alt="image-20230326172406897"></p><h3 id="三，Retrofit">三，Retrofit</h3><h4 id="OKHttp的具体创建">OKHttp的具体创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 提供OkHttpClient</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> OkHttpClient <span class="title function_">provideOkHttpClient</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//初始化okhttp</span></span><br><span class="line">       OkHttpClient.<span class="type">Builder</span> <span class="variable">okhttpClientBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//配置缓存</span></span><br><span class="line">       <span class="comment">//AppContext.getInstance() 这个是拿到了这个 APP 的上下文（自己写的）</span></span><br><span class="line">       <span class="type">Cache</span> <span class="variable">cache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cache</span>(AppContext.getInstance().getCacheDir(), Config.NETWORK_CACHE_SIZE);</span><br><span class="line">       <span class="comment">//Config.NETWORK_CACHE_SIZE 是自己定义的，这里是100M</span></span><br><span class="line">       okhttpClientBuilder.cache(cache);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//设置超时时间</span></span><br><span class="line">       okhttpClientBuilder.connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS) <span class="comment">//连接超时时间</span></span><br><span class="line">               .writeTimeout(<span class="number">10</span>, TimeUnit.SECONDS) <span class="comment">//写，也就是将数据发送到服务端超时时间</span></span><br><span class="line">               .readTimeout(<span class="number">10</span>, TimeUnit.SECONDS); <span class="comment">//读，将服务端的数据下载到本地</span></span><br><span class="line">       </span><br><span class="line"><span class="comment">//Config.DEBUG 这个也是自己写的一个 boolean 变量</span></span><br><span class="line">       <span class="keyword">if</span> (Config.DEBUG) &#123;</span><br><span class="line">           <span class="comment">//调试模式</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">//创建okhttp日志拦截器</span></span><br><span class="line">           <span class="type">HttpLoggingInterceptor</span> <span class="variable">loggingInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpLoggingInterceptor</span>();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//设置日志等级</span></span><br><span class="line">           loggingInterceptor.level(HttpLoggingInterceptor.Level.BASIC);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//添加到网络框架中</span></span><br><span class="line">           okhttpClientBuilder.addInterceptor(loggingInterceptor);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> okhttpClientBuilder.build();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Retrofit-的具体创建">Retrofit 的具体创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 提供Retrofit实例</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> okHttpClient</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Retrofit <span class="title function_">provideRetrofit</span><span class="params">(OkHttpClient okHttpClient)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">               <span class="comment">//让retrofit使用okhttp</span></span><br><span class="line">               .client(okHttpClient)</span><br><span class="line"></span><br><span class="line">               <span class="comment">//api地址  Config.ENDPOINT这个是自己在特别类里面定义的</span></span><br><span class="line">               .baseUrl(Config.ENDPOINT)</span><br><span class="line"></span><br><span class="line">               <span class="comment">//适配rxjava</span></span><br><span class="line">               .addCallAdapterFactory(RxJava3CallAdapterFactory.create())</span><br><span class="line"></span><br><span class="line">               <span class="comment">//使用gson解析json</span></span><br><span class="line">               <span class="comment">//包括请求参数和响应</span></span><br><span class="line">               .addConverterFactory(GsonConverterFactory.create(JSONUtil.createGson()))</span><br><span class="line"></span><br><span class="line">               <span class="comment">//创建retrofit</span></span><br><span class="line">               .build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>上面有些变量或者工具类要自己创建。</p><p>JSONUtil.createGson()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JSONUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Gson <span class="title function_">createGson</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">GsonBuilder</span> <span class="variable">gsonBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//驼峰转下划线</span></span><br><span class="line">        gsonBuilder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES);</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> gsonBuilder.create();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> gson;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建-service">创建 service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ixuea.courses.mymusic.component.api;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.reactivex.rxjava3.core.Observable;</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.GET;</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.Query;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认远程数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DefaultService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 音乐列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GET(&quot;v1/sheets&quot;)</span></span><br><span class="line">    Observable&lt;String&gt; <span class="title function_">sheets</span><span class="params">(<span class="meta">@Query(value = &quot;category&quot;)</span> String category, <span class="meta">@Query(value = &quot;size&quot;)</span> <span class="type">int</span> size)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Observable<String>: 网络请求数据打包的返回对象</p><p>其实不应该是 String 而是具体返回的是什么 Java 类型在本地搞他的实例类。</p><h4 id="Retrofit-使用">Retrofit 使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> NetworkModule.provideOkHttpClient();</span><br><span class="line"><span class="type">Retrofit</span> <span class="variable">retrofit</span> <span class="operator">=</span> NetworkModule.provideRetrofit(okHttpClient);</span><br><span class="line"><span class="type">DefaultService</span>    <span class="variable">service</span> <span class="operator">=</span> retrofit.create(DefaultService.class);</span><br></pre></td></tr></table></figure><h4 id="Bug">Bug</h4><p>Caused by: java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.ixuea.courses.mymusic.component.sheet.Sheet</p><p>Meta定义类多加了泛型。</p><p>类名没有泛型，但是方法有。</p><p>明天hao’hao</p>]]></content>
    
    
    <summary type="html">Android网络框架使用入门。（OKHttp，Retrofit）</summary>
    
    
    
    <category term="Android" scheme="http://lmc.pub/categories/Android/"/>
    
    
    <category term="Android" scheme="http://lmc.pub/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>【AS】快捷键</title>
    <link href="http://lmc.pub/2023/03/26/%E3%80%90AS%E3%80%91%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://lmc.pub/2023/03/26/%E3%80%90AS%E3%80%91%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2023-03-26T08:37:57.000Z</published>
    <updated>2023-03-27T00:16:50.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AS小技巧">AS小技巧</h2><p>ctrl + Alt + F ：变量全局化</p><p>ctrl + alt + v ：var 命名变量</p><p>shift + shift ：搜索方法或者类</p><p>ctrl + f：在这个文件中搜关键字</p><p>ctrl + shift + backspace ：回到上一次编辑的地方。</p><p>ctrl + fn + f12 ：查看当前类的方法结构</p><p>shit + fn + f6 ：全局改一个变量的命名（重构）</p><p>都用三杯吐 xxh挺好，然后都用dp不要用px</p><p>ctrl + shfit + enter</p><p>fn + alt + insert :构造器 getset方法那个</p><p>其实直接右键更加方便</p>]]></content>
    
    
    <summary type="html">Android Studio的一些常用快捷键。</summary>
    
    
    
    <category term="AS" scheme="http://lmc.pub/categories/AS/"/>
    
    
    <category term="AS" scheme="http://lmc.pub/tags/AS/"/>
    
  </entry>
  
  <entry>
    <title>【算法】设计链表707</title>
    <link href="http://lmc.pub/2023/03/26/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8707/"/>
    <id>http://lmc.pub/2023/03/26/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8707/</id>
    <published>2023-03-26T02:44:35.000Z</published>
    <updated>2023-03-26T08:33:33.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链表基础">链表基础</h3><h4 id="1-单链表">1. 单链表</h4><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806194529815.png" alt="单链表"></p><h4 id="2-双链表">2. 双链表</h4><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806194559317.png" alt="链表2"></p><h4 id="3-循环链表">3. 循环链表</h4><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806194629603.png" alt="链表4"></p><h4 id="4-存储方式">4. 存储方式</h4><blockquote><p>非连续</p></blockquote><h4 id="5-链表节点的定义">5. 链表节点的定义</h4><p>codes：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在下面</span><br></pre></td></tr></table></figure><h4 id="6-链表的操作">6. 链表的操作</h4><h5 id="a-删除">a. 删除</h5><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806195114541-20230310121459257.png" alt="链表-删除节点"></p><p>直接：前.next = next.next;</p><p>java 会自己清除 D；</p><h5 id="b-添加">b. 添加</h5><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806195134331-20230310121503147.png" alt="链表-添加节点"></p><p>code:</p><h4 id="7-链表和数组的对比">7. 链表和数组的对比</h4><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806195200276.png" alt="链表-链表与数据性能对比"></p><hr><p><a href="https://leetcode.cn/problems/design-linked-list/description/">设计链表707 from leetcode</a></p><h2 id="单链表">单链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设计链表707</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DesignLinkedList707</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="type">MyLinkedList</span> <span class="variable">myLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line"></span><br><span class="line">myLinkedList.addAtHead(<span class="number">1</span>);</span><br><span class="line">myLinkedList.printLinkedList();<span class="comment">// 1 -&gt; </span></span><br><span class="line"></span><br><span class="line">myLinkedList.addAtTail(<span class="number">3</span>);</span><br><span class="line">myLinkedList.printLinkedList();<span class="comment">// 1 -&gt; 3</span></span><br><span class="line"></span><br><span class="line">myLinkedList.addAtIndex(<span class="number">1</span>, <span class="number">2</span>);      </span><br><span class="line">myLinkedList.printLinkedList();<span class="comment">// 1-&gt;2-&gt;3</span></span><br><span class="line"></span><br><span class="line">System.out.println(myLinkedList.get(<span class="number">1</span>));    <span class="comment">// 返回 2</span></span><br><span class="line"></span><br><span class="line">myLinkedList.deleteAtIndex(<span class="number">1</span>);    </span><br><span class="line">myLinkedList.printLinkedList(); <span class="comment">// 现在，链表变为 1-&gt;3</span></span><br><span class="line"></span><br><span class="line">System.out.println(myLinkedList.get(<span class="number">1</span>));    <span class="comment">// 返回 3</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">ListNode next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val,ListNode next)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="comment">//虚拟节点</span></span><br><span class="line">ListNode dummy;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取链表中第 index 个节点的值。如果索引无效，则返回-1。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">    <span class="comment">//越界了</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy.next;<span class="comment">//0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; index; i++)&#123;</span><br><span class="line">    cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">    addAtIndex(<span class="number">0</span>,val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将值为 val 的节点追加到链表的最后一个元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">    addAtIndex(size,val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在链表中的第 index 个节点之前添加值为 val  的节点。</span></span><br><span class="line"><span class="comment">     * 如果 index 等于链表的长度，则该节点将附加到链表的末尾。</span></span><br><span class="line"><span class="comment">     * 如果 index 大于链表长度，则不会插入节点。</span></span><br><span class="line"><span class="comment">     * 如果index小于0，则在头部插入节点。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line"> index = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (index &gt; size) &#123;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//中间正常插入</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="type">ListNode</span> <span class="variable">addListNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line"> <span class="comment">//找到前继节点</span></span><br><span class="line"> <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;  i &lt; index; i++) &#123;</span><br><span class="line"> pre = pre.next;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> addListNode.next = pre.next;</span><br><span class="line"> pre.next = addListNode;</span><br><span class="line"> size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果索引 index 有效，则删除链表中的第 index 个节点。</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">//安全性检验</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到 deleteIndexListNode 前面一个 ListNode</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">    pre = pre.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pre.next = pre.next.next;</span><br><span class="line">    size--;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dummy.next;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.print(cur.val + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">    cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双向链表">双向链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设计链表707</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DesignLinkedList707</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">MyLinkedList</span> <span class="variable">myLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line"></span><br><span class="line">myLinkedList.addAtHead(<span class="number">1</span>);</span><br><span class="line">myLinkedList.printLinkedList();<span class="comment">// 1 -&gt; </span></span><br><span class="line"></span><br><span class="line">myLinkedList.addAtTail(<span class="number">3</span>);</span><br><span class="line">myLinkedList.printLinkedList();<span class="comment">// 1 -&gt; 3</span></span><br><span class="line"></span><br><span class="line">myLinkedList.addAtIndex(<span class="number">1</span>, <span class="number">2</span>);      </span><br><span class="line">myLinkedList.printLinkedList();<span class="comment">// 1-&gt;2-&gt;3</span></span><br><span class="line"></span><br><span class="line">System.out.println(myLinkedList.get(<span class="number">1</span>));    <span class="comment">// 返回 2</span></span><br><span class="line"></span><br><span class="line">myLinkedList.deleteAtIndex(<span class="number">1</span>);    </span><br><span class="line">myLinkedList.printLinkedList(); <span class="comment">// 现在，链表变为 1-&gt;3</span></span><br><span class="line"></span><br><span class="line">System.out.println(myLinkedList.get(<span class="number">1</span>));    <span class="comment">// 返回 3</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">ListNode prev,next;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span> <span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span> <span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line">ListNode head,tail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">tail = <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">head.next = tail;</span><br><span class="line">tail.prev = head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断从那边开始找</span></span><br><span class="line"><span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">if</span> (index &gt; size/<span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//从后面开始找</span></span><br><span class="line">cur = tail;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size - index; i++)&#123;</span><br><span class="line">cur = cur.prev;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//从前面开始找</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++)&#123;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cur.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">addAtIndex(<span class="number">0</span>,val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">    addAtIndex(size,val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第 index 个节点之前插入一个新节点，例如index为0，那么新插入的节点为链表的新头节点。</span></span><br><span class="line">    <span class="comment">// 如果 index 等于链表的长度，则说明是新插入的节点为链表的尾结点</span></span><br><span class="line">    <span class="comment">// 如果 index 大于链表的长度，则返回空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (index &gt; size) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">frontNode</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)&#123;</span><br><span class="line">    frontNode = frontNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//现在 frontNode 就是要插入节点位置前一个</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">insertNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">    insertNode.next = frontNode.next;</span><br><span class="line">    frontNode.next.prev = insertNode;</span><br><span class="line">    insertNode.prev = frontNode;</span><br><span class="line">    frontNode.next = insertNode;</span><br><span class="line"></span><br><span class="line">    size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">frontNode</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">    frontNode = frontNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//现在 frontNode 就是要删除节点的上一个节点</span></span><br><span class="line">    frontNode.next.next.prev = frontNode;</span><br><span class="line">    frontNode.next = frontNode.next.next;</span><br><span class="line">    size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">while</span>(cur != tail)&#123;</span><br><span class="line">    System.out.print(cur.val + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">    cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一道题目包含了链表的5个基本操作。</summary>
    
    
    
    <category term="算法" scheme="http://lmc.pub/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://lmc.pub/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【算法】移除链表元素203</title>
    <link href="http://lmc.pub/2023/03/25/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0203/"/>
    <id>http://lmc.pub/2023/03/25/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0203/</id>
    <published>2023-03-25T14:08:56.000Z</published>
    <updated>2023-03-25T15:05:16.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="203-移除数组元素">203 移除数组元素</h3><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/description/">203. 移除链表元素 - 力扣（Leetcode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//移除链表元素 203</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoveLinkedListElements203</span> &#123; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> initLinkedList(arr);</span><br><span class="line">head = removeElements(head,<span class="number">3</span>);</span><br><span class="line">printLinkedList(head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 虚拟节点方案</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@head</span> 链表头节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@val</span>  删除元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 被删除节点 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">//安全性校验</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>,head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.val == val) &#123;</span><br><span class="line">        pre.next = cur.next;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">initLinkedList</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(nums[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">    ListNode cur;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">    cur = <span class="keyword">new</span> <span class="title class_">ListNode</span>(nums[i]);</span><br><span class="line">    pre.next = cur;</span><br><span class="line"> pre = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printLinkedList</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.print(cur.val + <span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">    cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line"><span class="type">int</span> val;<span class="comment">//节点的值</span></span><br><span class="line">ListNode next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span> <span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span> <span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span> <span class="params">(<span class="type">int</span> val, ListNode next)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">链表章节【虚拟头节点】的典型例子。</summary>
    
    
    
    <category term="算法" scheme="http://lmc.pub/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://lmc.pub/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【修电脑】笔记本触控板突然没用了</title>
    <link href="http://lmc.pub/2023/03/25/%E3%80%90%E4%BF%AE%E7%94%B5%E8%84%91%E3%80%91%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%A7%A6%E6%8E%A7%E6%9D%BF%E7%AA%81%E7%84%B6%E6%B2%A1%E7%94%A8%E4%BA%86/"/>
    <id>http://lmc.pub/2023/03/25/%E3%80%90%E4%BF%AE%E7%94%B5%E8%84%91%E3%80%91%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%A7%A6%E6%8E%A7%E6%9D%BF%E7%AA%81%E7%84%B6%E6%B2%A1%E7%94%A8%E4%BA%86/</id>
    <published>2023-03-25T03:00:31.000Z</published>
    <updated>2023-03-25T03:53:38.527Z</updated>
    
    <content type="html"><![CDATA[<p>今早起来，心情不好。</p><p>拿出 我的<code>扛皮油特</code>准备刷个算法题。</p><p>结果发现：莫名其妙，触控板挂了。</p><p>然后一上午就在解决这个问题，什么都没干。</p><h2 id="一，查找病因">一，查找病因</h2><p>电脑坏了一般原因有三：</p><ol><li>硬件上坏了；</li><li>软件，也就是驱动有问题；</li><li>系统自己的Bug；（比如win11经常这样）</li><li>大自然神力；</li></ol><p>由于我对电脑一向爱护有加，所以基本排除1。</p><p>我当时猜想就是：</p><ol><li>驱动坏了</li><li>win11老狗又更新的新Bug</li></ol><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230325111444.jpg" alt="微信图片_20230325111444"></p><p>看了以下设备管理器，<code>人体学输入设备</code>和<code>鼠标和其他指针设备</code>下面都没有什么<code>触控板 or Touch</code>相关字眼的东西。</p><p>大概率是<code>触控板驱动没了</code>。</p><h2 id="二，solution">二，solution</h2><h3 id="2-1-拷贝驱动文件">2.1 拷贝驱动文件</h3><p>我先是找到了触控板的驱动名和文件夹名 from 网上。</p><p>然后发现我真的莫得这个文件。</p><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230325112410837.png" alt="image-20230325112410837"></p><p>然后让我朋友从他电脑上传来一份新的给我。</p><p>然后这个文件目录就是在 Windows 下面。</p><p><code>Cursors</code> 这个。</p><p>然后发现没用。。。</p><h3 id="2-2-然后去官方重下了所有驱动">2.2 然后去官方重下了所有驱动</h3><p>没用</p><h3 id="2-3-联想驱动管理-360驱动管家">2.3 联想驱动管理/360驱动管家</h3><p>没用</p><p>重启了十几遍，还是没好。</p><h2 id="三，ending">三，ending</h2><p>最后查出原因是：静电。</p><p>解决办法是：</p><ol><li>先把电脑关机。</li><li>把电脑所有外设（什么鼠标，键盘，充电的）都去掉。</li><li>在不接电源的情况下，长按开机键30s以上，让他开机又关机。</li></ol><p>上面这个步骤就是去除电脑静电的。</p><p>然后就会出现下面这个<code>蓝屏</code>：</p><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230325111452.jpg" alt="微信图片_20230325111452"></p><p>这时候基本可以看下<code>触控板</code>能不能用了。</p><p>我的是可以了。</p><p>点击重启电脑，然后我滴生产力就又恢复了。</p><p>查看驱动列表：</p><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230325113527192.png" alt="image-20230325113527192"></p><p>触控板的驱动就出来了。</p><hr><p>这波属于是<code>自然怪力乱神</code>了。</p><p>合理的解释是：</p><p>天气干燥，人体携带静电在我触摸电脑的时候静电导入到电脑中，造成的电脑出现使用的异常情况。</p><p>so</p><p>电脑也是像汽车一样要保养的。</p><p>除静电，清灰，打光，保持干净。</p><p>一起干活的老伙计，我还要靠你吃饭捏。</p>]]></content>
    
    
    <summary type="html">有天心情不好，准备拿电脑刷道算法。突觉触控板挂了，遂修之。</summary>
    
    
    
    <category term="修电脑" scheme="http://lmc.pub/categories/%E4%BF%AE%E7%94%B5%E8%84%91/"/>
    
    
    <category term="修电脑" scheme="http://lmc.pub/tags/%E4%BF%AE%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>【算法】长度最小的子数组209</title>
    <link href="http://lmc.pub/2023/03/25/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84209/"/>
    <id>http://lmc.pub/2023/03/25/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84209/</id>
    <published>2023-03-24T23:16:37.000Z</published>
    <updated>2023-03-24T23:17:39.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="209-长度最小的子数组">209. 长度最小的子数组</h3><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组 - 力扣（Leetcode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//209长度最小的子数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinimumSizeSubarraySum209</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入 targetNum:&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">minLen</span> <span class="operator">=</span> minSubArrayLen(target,arr);</span><br><span class="line"><span class="keyword">if</span> (minLen == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;\n没有找到&quot;</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;\n最小的子数组的长度为：&quot;</span> + minLen);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//滑动窗口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>,sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;right &lt; nums.length; right++) &#123;</span><br><span class="line">sum += nums[right];</span><br><span class="line"><span class="keyword">while</span> ( sum &gt;= target)&#123;</span><br><span class="line">res = Math.min(res,right - left + <span class="number">1</span>);</span><br><span class="line">sum  -= nums[left++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">return</span> <span class="variable">res</span> <span class="operator">=</span>= Integer.MAX_VALUE ? <span class="number">0</span> : res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">数组篇章讲【滑动窗口】的典型例子。</summary>
    
    
    
    <category term="算法" scheme="http://lmc.pub/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://lmc.pub/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【算法】螺旋矩阵II59</title>
    <link href="http://lmc.pub/2023/03/25/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II59/"/>
    <id>http://lmc.pub/2023/03/25/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II59/</id>
    <published>2023-03-24T22:55:17.000Z</published>
    <updated>2023-03-24T23:18:14.959Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/spiral-matrix-ii/submissions/417379777/">59. 螺旋矩阵 II - 力扣（Leetcode）</a></p><p>MyCodes:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//螺旋矩阵II 59</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpiralMatrixII59</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;请输入  n = &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] res = generateMatrix(n);</span><br><span class="line">System.out.println(<span class="string">&quot;\n&quot;</span> + n + <span class="string">&quot; 的螺旋矩阵为：&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span>[] itemGroup : res)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> item : itemGroup)&#123;</span><br><span class="line">System.out.print(item + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">input.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line"><span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//起始点</span></span><br><span class="line"><span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//控制循环次数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//填充 num</span></span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (loop++ &lt; n / <span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上</span></span><br><span class="line"><span class="keyword">for</span> (j = start; j &lt; n - loop; j++)&#123;</span><br><span class="line">res[start][j] = count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右</span></span><br><span class="line"><span class="keyword">for</span> (i = start; i &lt; n - loop; i++)&#123;</span><br><span class="line">res[i][j] = count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下</span></span><br><span class="line"><span class="keyword">for</span> (; j &gt;= loop; j--)&#123;</span><br><span class="line">res[i][j] = count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左</span></span><br><span class="line"><span class="keyword">for</span> (; i &gt;= loop; i--)&#123;</span><br><span class="line">res[i][j] = count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变起始点</span></span><br><span class="line">start++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//n 为奇数，填充 （n/2, n/2）= n*n;</span></span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">res[start][start] = count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">数组篇章讲【模拟行为】的典型例子。</summary>
    
    
    
    <category term="算法" scheme="http://lmc.pub/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://lmc.pub/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【算法】有序数组的平方977</title>
    <link href="http://lmc.pub/2023/03/24/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9977/"/>
    <id>http://lmc.pub/2023/03/24/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9977/</id>
    <published>2023-03-24T14:09:35.000Z</published>
    <updated>2023-03-25T03:48:54.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="977-有序数组的平方">977. 有序数组的平方</h3><p>[<a href="https://www.programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC">977.有序数组的平方 - 力扣（Leetcode)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//977有序数组的平方</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SquaresOfASortedArray977</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;-<span class="number">4</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] res = sortedSquares(arr);</span><br><span class="line">System.out.print(<span class="string">&quot;平方结果为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> item : res) &#123;</span><br><span class="line">System.out.print(item + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0,1,9,16,100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//双指针法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line"></span><br><span class="line"><span class="comment">//我自己写的办法</span></span><br><span class="line"><span class="comment">// for(int i = res.length - 1;i &gt;= 0;i--)&#123;</span></span><br><span class="line"><span class="comment">// if (nums[left] * nums[left] &lt; nums[right] * nums[right]) &#123;</span></span><br><span class="line"><span class="comment">// res[i] = nums[right] * nums[right--];</span></span><br><span class="line"><span class="comment">// &#125;else &#123;</span></span><br><span class="line"><span class="comment">// res[i] = nums[left] * nums[left++];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//另外一种办法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> res.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line"><span class="keyword">if</span> (nums[left] * nums[left] &lt; nums[right] * nums[right]) &#123;</span><br><span class="line">res[i--] = nums[right] * nums[right--];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">res[i--] = nums[left] * nums[left++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">数组篇章讲【双指针法】的又一个典型例子。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【算法】移除元素27</title>
    <link href="http://lmc.pub/2023/03/24/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A027/"/>
    <id>http://lmc.pub/2023/03/24/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A027/</id>
    <published>2023-03-24T14:08:44.000Z</published>
    <updated>2023-03-25T03:48:43.325Z</updated>
    
    <content type="html"><![CDATA[<h3 id="27-移除元素">27. 移除元素</h3><p><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素 - 力扣（Leetcode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//27 移除元素</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RemoveElement27</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span>[] numArray = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line">System.out.print(<span class="string">&quot;请输入要去除的元素：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">removeNum</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"><span class="comment">//int newLength = removeElement(numArray,removeNum);</span></span><br><span class="line"><span class="type">int</span> <span class="variable">newLength</span> <span class="operator">=</span> removeElement02(numArray,removeNum);</span><br><span class="line">System.out.println(<span class="string">&quot;\nThe length of the new numArray is &quot;</span> + newLength);</span><br><span class="line">myScanner.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//双指针法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> val)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">slowIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">fastIndex</span> <span class="operator">=</span> <span class="number">0</span>; fastIndex &lt; nums.length; fastIndex++)&#123;</span><br><span class="line"><span class="keyword">if</span> (nums[fastIndex] != val) &#123;</span><br><span class="line">nums[slowIndex] = nums[fastIndex];</span><br><span class="line">slowIndex++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> slowIndex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//相向双指针法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">removeElement02</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> val)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line"><span class="comment">//找到从右边开始第一个会被交换过来的元素作为第一个交换的</span></span><br><span class="line"><span class="keyword">while</span>(right &gt;= <span class="number">0</span> &amp;&amp; nums[right] == val) right--;</span><br><span class="line"><span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line"><span class="keyword">if</span> (nums[left] == val) &#123;</span><br><span class="line">nums[left] = nums[right--];</span><br><span class="line">&#125;</span><br><span class="line">left++;</span><br><span class="line"><span class="keyword">while</span>(right &gt;= <span class="number">0</span> &amp;&amp; nums[right] == val) right--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bug:</p><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230324150049748.png" alt=""></p><p>solution：文件名要和类名保持一致。</p>]]></content>
    
    
    <summary type="html">数组篇章讲【双指针法】的典型例子。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【计网】介绍一下OSI七层模型和TCP五层模型？</title>
    <link href="http://lmc.pub/2023/03/23/%E3%80%90%E8%AE%A1%E7%BD%91%E3%80%91%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8BOSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E5%92%8CTCP%E4%BA%94%E5%B1%82%E6%A8%A1%E5%9E%8B%EF%BC%9F/"/>
    <id>http://lmc.pub/2023/03/23/%E3%80%90%E8%AE%A1%E7%BD%91%E3%80%91%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8BOSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E5%92%8CTCP%E4%BA%94%E5%B1%82%E6%A8%A1%E5%9E%8B%EF%BC%9F/</id>
    <published>2023-03-23T14:13:25.000Z</published>
    <updated>2023-03-23T14:48:04.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-计算机网络体系结构⭐">1. 计算机网络体系结构⭐</h2><blockquote><p>计算机网络体系结构有两种说法：1. OSI体系结构；2. TCP/IP体系结构。</p><p>前者是学术上的，后者是实际市场中的。</p><p><strong>7层 OSI 体系结构</strong>：</p><table><thead><tr><th>应用层</th></tr></thead><tbody><tr><td>表示层</td></tr><tr><td>会话层</td></tr><tr><td>运输层</td></tr><tr><td>网络层</td></tr><tr><td>数据链路层</td></tr><tr><td>物理层</td></tr></tbody></table><p><strong>4层 TCP/IP 体系结构</strong>：</p><table><thead><tr><th></th><th>网络协议</th><th>作用</th></tr></thead><tbody><tr><td>应用层</td><td>HTTP/DNS</td><td>处理应用程序之间的逻辑</td></tr><tr><td>运输层</td><td>TCP/UDP</td><td>不同进程之间的网络通信问题</td></tr><tr><td>网际层</td><td>IP</td><td>分组在多个网络上传输的问题</td></tr><tr><td>网络接口层</td><td>各种网络接口</td><td></td></tr></tbody></table><p>我们都是用 TCP/IP 协议，也就是后者。</p><p>也有一种说话说：TCP/IP 五层体系结构。</p><p>就是在原有四次之上<code>网络接口层</code>换成了<code>数据链路层 + 物理层</code>。</p></blockquote>]]></content>
    
    
    <summary type="html">一个位于概述章节，常考的计网面试题。</summary>
    
    
    
    <category term="计网" scheme="http://lmc.pub/categories/%E8%AE%A1%E7%BD%91/"/>
    
    
    <category term="计网" scheme="http://lmc.pub/tags/%E8%AE%A1%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>【算法】二分查找704</title>
    <link href="http://lmc.pub/2023/03/23/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE704/"/>
    <id>http://lmc.pub/2023/03/23/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE704/</id>
    <published>2023-03-23T13:46:56.000Z</published>
    <updated>2023-03-26T08:34:21.745Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="1-数组基本概念">1. 数组基本概念</h3><p>在一片连续的内存地址上同意类型的数据集合。</p><p>二维数组在C++中内存地址是连续的，但是Java中不是。</p><p>Java 中 int[5] [6] 是5个行首指针放在一个连续组里面大小为5，然后各自指向一条连续的6空间。</p><p>所以是5*6的连续空间</p><p>Java中是每一行当一个，然后每行的头是连续内存。</p></blockquote><h1>二分查找</h1><h2 id="一，题目描述">一，题目描述</h2><p><a href="https://leetcode.cn/problems/binary-search/">704</a></p><p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230323215019331.png" alt="image-20230323215019331"></p><h2 id="二，适用条件">二，适用条件</h2><ol><li>数组有序；</li><li>数组无重复元素；</li></ol><h2 id="三，代码实现：">三，代码实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左闭右闭版本</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">//防止target不在范围内，多次循环</span></span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[<span class="number">0</span>] || target &gt; nums[nums.length - <span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>,right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &lt; target)&#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &gt; target)&#123;</span><br><span class="line">                right = middle - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四，感想">四，感想</h2><ol><li>要注意力扣写法和ACM写法。</li><li>ACM写法是面试的样子：一张白字自己实现所有。</li><li>先用 Sublime 写吧。编号就是 <code>704 BinarySearch</code></li><li>class 里面一个main 一个 function。</li><li>一个小Bug：<img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230323191106860.png" alt="image-20230323191106860"></li></ol>]]></content>
    
    
    <summary type="html">数组篇章讲【二分法】和 【循环不变量原则】的典型例子。</summary>
    
    
    
    <category term="算法" scheme="http://lmc.pub/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://lmc.pub/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Git基础</title>
    <link href="http://lmc.pub/2023/03/14/Git/"/>
    <id>http://lmc.pub/2023/03/14/Git/</id>
    <published>2023-03-14T14:03:00.000Z</published>
    <updated>2023-03-27T01:36:52.723Z</updated>
    
    <content type="html"><![CDATA[<h1>Git基础</h1><h2 id="一，准备">一，准备</h2><h3 id="1-安装">1. 安装</h3><blockquote><p>下载：<a href="https://gitforwindows.org/">Git for Windows</a></p></blockquote><p>无脑式下一步。</p><p>git –version，出现下面 git 就是安装好了。</p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230314154601364.png" alt="image-20230314154601364" style="zoom:80%;" /><h3 id="2-配置用户信息">2. 配置用户信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;xxx@qq.com&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-创建仓库">3. 创建仓库</h3><p>你想让哪一个文件夹成为 git 仓库就在它下面打开 git bash 然后输下面这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>这个文件夹下面就会有一个 .git 文件。</p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230314170738200.png" alt="image-20230314170738200" style="zoom:80%;" /><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230314170817463.png" alt="image-20230314170817463" style="zoom:80%;" /><h3 id="4-查看仓库状态">4. 查看仓库状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git git status</span><br></pre></td></tr></table></figure><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230314170836047.png" alt="image-20230314170836047" style="zoom:80%;" /><h2 id="二，暂存区">二，暂存区</h2><blockquote><p>准备工作：在文件夹下搞个文件。（最好英文名）</p></blockquote><h3 id="1-添加到暂存区">1. 添加到暂存区</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件</span><br><span class="line">git add 文件名</span><br><span class="line"></span><br><span class="line"># 添加这个仓库文件夹下的所有文件</span><br><span class="line">git add -A</span><br></pre></td></tr></table></figure><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230314171905546.png" alt="image-20230314171905546" style="zoom:80%;" /><h3 id="2-暂存区回来">2. 暂存区回来</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git restore 文件名</span><br><span class="line">git restore --staged 文件名</span><br></pre></td></tr></table></figure><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230314171931261.png" alt="image-20230314171931261" style="zoom:80%;" /><h2 id="三，本地仓库">三，本地仓库</h2><h3 id="1-提交到本地仓库">1. 提交到本地仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;这次提交干了什么事的描述（建议英文）&quot;</span><br></pre></td></tr></table></figure><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230314172124631.png" alt="image-20230314172124631" style="zoom:80%;" /><h3 id="2-从本地仓库回来">2. 从本地仓库回来</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 恢复到上一次</span><br><span class="line">git reset --hard HEAD~</span><br><span class="line"></span><br><span class="line"># 恢复到指定提交</span><br><span class="line">git reset --hard 提交id</span><br></pre></td></tr></table></figure><p>本地仓库里有很多版本，用这个会直接把你的那个文件回到指令中的那个版本。</p><img src="https://article-picture-resource.oss-cn-chengdu.aliyuncs.com/imags/image-20230314172813969.png" alt="image-20230314172813969" style="zoom:80%;" /><h3 id="3-查看提交历史">3. 查看提交历史</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>错了就改，缺了就补，时常回顾，精心打造自己的计算机知识体系。</p>]]></content>
    
    
    <summary type="html">Git的命令行和本地常用指令和概念。</summary>
    
    
    
    <category term="其他" scheme="http://lmc.pub/categories/%E5%85%B6%E4%BB%96/"/>
    
    <category term="Git" scheme="http://lmc.pub/categories/%E5%85%B6%E4%BB%96/Git/"/>
    
    
    <category term="Git" scheme="http://lmc.pub/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>【Bug】Java中Char和Int的互转</title>
    <link href="http://lmc.pub/2023/01/11/%E3%80%90Bug%E3%80%91Java%E4%B8%ADChar%E5%92%8CInt%E7%9A%84%E4%BA%92%E8%BD%AC/"/>
    <id>http://lmc.pub/2023/01/11/%E3%80%90Bug%E3%80%91Java%E4%B8%ADChar%E5%92%8CInt%E7%9A%84%E4%BA%92%E8%BD%AC/</id>
    <published>2023-01-11T04:24:27.000Z</published>
    <updated>2023-03-23T14:26:07.801Z</updated>
    
    <content type="html"><![CDATA[<h1>【Bug】Java中Char和Int的互转</h1><p>今天在做一个栈相关的算法，然后在 Java中Char和Int互转 这里粗心记混了，结果出了个Bug，修了一会。</p><p>事情是这样的：</p><p>有一个由数字构成的字符串，比如：“1433223”，然后想把组成字符串的每一位数字都放到一个栈里面去。</p><p>但是每次从这个字符串(String)拿出来的是是一个字符(Char)而非数字(Int)，比如拿出第一位，他是字符‘1’而不是整数1。</p><p>当时就直接强转了，以为： int 1 = (int)‘1’</p><p>但其实 (int)‘1’ = 49(int) 而不是期望的 1(int)。导致后面的一大堆出了奇怪的 bug。</p><p><img src="C:/Users/Micenlee/AppData/Roaming/Typora/typora-user-images/image-20230111231905800.png" alt="image-20230111231905800"></p><p>因为 Java 中的char其实底层都是对应的ASCII码，也是int整数。</p><p>比如：‘1’（Char） = 49(int)</p><p>所以正确的做法，应该是下面这样：</p><p>把char转为对应的Integer</p><p><img src="C:/Users/Micenlee/AppData/Roaming/Typora/typora-user-images/image-20230111232012386.png" alt="image-20230111232012386"></p><p>当然也可以这样：</p><p>numStack.push((int)(char01 - ‘0’);</p><p>所以关于 Java的Char底层就是对应的ASCII码(int),你忘了吗？</p><p><s>(int)‘1’ = 1(int)</s></p><p>(int)‘1’ = 49(int)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;【Bug】Java中Char和Int的互转&lt;/h1&gt;
&lt;p&gt;今天在做一个栈相关的算法，然后在 Java中Char和Int互转 这里粗心记混了，结果出了个Bug，修了一会。&lt;/p&gt;
&lt;p&gt;事情是这样的：&lt;/p&gt;
&lt;p&gt;有一个由数字构成的字符串，比如：“1433223”，然后</summary>
      
    
    
    
    <category term="Bug" scheme="http://lmc.pub/categories/Bug/"/>
    
    
    <category term="Bug" scheme="http://lmc.pub/tags/Bug/"/>
    
  </entry>
  
</feed>
